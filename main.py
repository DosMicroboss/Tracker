import streamlit as st
import json
import uuid
from datetime import datetime
from pathlib import Path

import sys
sys.path.append('F:/adk/core')

from core.domain import Task
from core.filters import by_priority, by_assignee, by_date_range
from core.transforms import filter_by_status, add_task, remove_task
from core.reports import overdue_tasks, Rule



DATA_PATH = Path(__file__).parent.parent / "data" / "seed.json"

USERS = {
    "admin": {"role": "admin", "id": "u_admin"},
    "user1": {"role": "user", "id": "u_1"},
    "user2": {"role": "user", "id": "u_2"},
}

def login():
    st.sidebar.title("–í—Ö–æ–¥")
    username = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", list(USERS.keys()))
    if st.sidebar.button("–í–æ–π—Ç–∏"):
        st.session_state["user"] = USERS[username]
        st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {username}")

def load_data():
    with open(DATA_PATH, encoding="utf-8") as f:
        data = json.load(f)
    tasks = [Task(**t) for t in data["tasks"]]
    return data, tasks


def save_data(data):
    with open(DATA_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def page_overview():
    data, tasks = load_data()
    projects = data["projects"]
    users = data["users"]

    st.title("–û–±–∑–æ—Ä")

    c1, c2, c3 = st.columns(3)
    c1.metric("–ü—Ä–æ–µ–∫—Ç—ã", len(projects))
    c2.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", len(users))
    c3.metric("–ó–∞–¥–∞—á–∏", len(tasks))

    st.subheader("–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
    status_counts = {
        s: len(filter_by_status(tuple(tasks), s))
        for s in ["todo", "in_progress", "review", "done"]
    }
    st.bar_chart(status_counts)


def page_filters():
    _, tasks = load_data()
    st.title("–§–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á")

    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞", expanded=True):
        c1, c2, c3 = st.columns(3)

        priority = c1.selectbox(
            "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["–≤—Å–µ", "–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"]
        )
        if priority != '–≤—Å–µ':
            tasks = list(filter(by_priority(priority), tasks))

        assignee = c2.text_input("(user_id)")
        if assignee:
            tasks = list(filter(by_assignee(assignee), tasks))

        start = c3.date_input("–ù–∞—á–∞–ª–æ –¥–∞—Ç—ã")
        end = c3.date_input("–ö–æ–Ω–µ—Ü –¥–∞—Ç—ã")
        if start and end:
            tasks = list(filter(by_date_range(str(start), str(end)), tasks))

    st.subheader("–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    if tasks:
        st.dataframe(
            [
                {
                    "ID": t.id,
                    "Title": t.title,
                    "Status": t.status,
                    "Priority": t.priority,
                    "Assignee": t.assignee,
                    "Created": t.created,
                }
                for t in tasks
            ],
            use_container_width=True,
        )
    else:
        st.info("–ù–µ—Ç –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É")


def persist_and_reload(data, tasks_all):
    data["tasks"] = [t.__dict__ for t in tasks_all]
    save_data(data)
    return list(tasks_all)

def manage_tasks():
    data, tasks_all = load_data()
    st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")

    if "user" not in st.session_state:
        st.warning("‚ö† –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        return
    current_user = st.session_state["user"]

    if current_user["role"] != "admin":
        tasks_view = [t for t in tasks_all if t.assignee == current_user["id"]]
    else:
        tasks_view = list(tasks_all)

    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    with st.form("add_form"):
        title = st.text_input("–ó–∞–≥–æ–ª–æ–≤–æ–∫")
        desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
        status = st.selectbox("–°—Ç–∞—Ç—É—Å", ["todo", "in_progress", "review", "done"])
        priority = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", ["–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"])

        if current_user["role"] == "admin":
            assignee = st.text_input("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (user_id)")
        else:
            assignee = current_user["id"]
            st.text_input("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (user_id)", value=assignee, disabled=True)

        submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        if submitted:
            now = datetime.now().strftime("%Y-%m-%d")
            existing = next((t for t in tasks_all if t.title == title), None)
            if existing:
                updated_task = Task(
                    id=existing.id,
                    project_id=existing.project_id,
                    title=title,
                    desc=desc,
                    status=status,
                    priority=priority,
                    assignee=assignee,
                    created=existing.created,
                    updated=now,
                )
                tasks_all = tuple(t if t.id != existing.id else updated_task for t in tasks_all)
                st.info(f"–ó–∞–¥–∞—á–∞ '{title}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            else:
                new_task = Task(
                    id=str(uuid.uuid4())[:8],
                    project_id="p1",
                    title=title,
                    desc=desc,
                    status=status,
                    priority=priority,
                    assignee=assignee,
                    created=now,
                    updated=now,
                )
                tasks_all = add_task(tuple(tasks_all), new_task)
                st.success(f"–ó–∞–¥–∞—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ {new_task.id}.")

            tasks_all = tuple(tasks_all)
            persist_and_reload(data, tasks_all)
            if current_user["role"] != "admin":
                tasks_view = [t for t in tasks_all if t.assignee == current_user["id"]]
            else:
                tasks_view = list(tasks_all)

    st.subheader("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    if tasks_view:
        remove_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", [f"{t.id} | {t.title}" for t in tasks_view])
        if st.button("–£–¥–∞–ª–∏—Ç—å"):
            remove_id = remove_choice.split(" | ")[0]
            tasks_all = remove_task(tuple(tasks_all), remove_id)
            persist_and_reload(data, tasks_all)
            st.warning(f"üóë –ó–∞–¥–∞—á–∞ {remove_id} —É–¥–∞–ª–µ–Ω–∞!")
            if current_user["role"] != "admin":
                tasks_view = [t for t in tasks_all if t.assignee == current_user["id"]]
            else:
                tasks_view = list(tasks_all)
    else:
        st.info("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    st.subheader("–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏")
    st.dataframe(
        [
            {"ID": t.id, "Title": t.title, "Status": t.status, "Priority": t.priority, "Assignee": t.assignee}
            for t in tasks_view
        ],
        use_container_width=True,
    )

def page_reports():
    data, tasks = load_data()
    st.title("Reports")
    st.subheader("Overdue tasks (cached)")


    rules = (Rule(7),)
    tasks_tuple = tuple(tasks)

    if st.button("–ü–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"):
        import time
        start = time.perf_counter()
        result = overdue_tasks(tasks_tuple, rules)
        duration = time.perf_counter() - start

        st.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.6f} —Å–µ–∫.")
        st.write(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(result)}")

        if result:
            st.dataframe(
                [
                    {
                        "ID": t.id,
                        "Title": t.title,
                        "Status": t.status,
                        "Priority": t.priority,
                        "Updated": t.updated,
                    }
                    for t in result
                ],
                use_container_width=True,
            )
        else:
            st.info("–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")




def main():
    st.set_page_config(page_title="–¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á", page_icon="", layout="wide")

    st.set_page_config(page_title="–¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á", layout="wide")
    login()

    #css_path = Path(__file__).parent / "style.css"
    #if css_path.exists():
    #    with open(css_path, "r", encoding="utf-8") as f:
    #        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    #else:
    #    st.warning("style.css –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–º–µ—Å—Ç–∏ —Ñ–∞–π–ª —Ä—è–¥–æ–º —Å main.py")

    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.radio("–ü–µ—Ä–µ–π—Ç–∏", ["–û–±–∑–æ—Ä", "–§–∏–ª—å—Ç—Ä—ã", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", "–û—Ç—á–µ—Ç—ã"])

    if page == "–û–±–∑–æ—Ä":
        page_overview()
    elif page == "–§–∏–ª—å—Ç—Ä—ã":
        page_filters()
    elif page == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏":
        manage_tasks()
    elif page == "–û—Ç—á–µ—Ç—ã":
        from core.reports import overdue_tasks, Rule
        _, tasks = load_data()
        rules = (Rule(7),)
        result = overdue_tasks(tuple(tasks), rules)

        st.title("Overdue tasks (cached)")
        st.write(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: **{len(result)}**")
        st.dataframe(
         [
                {"ID": t.id, "Title": t.title, "Status": t.status, "Updated": t.updated}
                for t in result
            ]
     )


if __name__ == "__main__":
    main()
